// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SectionManagement.Infrastructure.Data;

#nullable disable

namespace SectionManagement.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SectionManagement.Core.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionSingleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("DeviceId");

                    b.HasIndex("SectionSingleId");

                    b.ToTable("PostDevice");
                });

            modelBuilder.Entity("SectionManagement.Core.Models.Port", b =>
                {
                    b.Property<int>("PortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PortId");

                    b.ToTable("PostPort");
                });

            modelBuilder.Entity("SectionManagement.Core.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId");

                    b.ToTable("PostSection");
                });

            modelBuilder.Entity("SectionManagement.Core.Models.SectionSingle", b =>
                {
                    b.Property<int>("SectionSingleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionSingleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("SectionTyp")
                        .HasColumnType("int");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SectionSingleId");

                    b.HasIndex("SectionId");

                    b.ToTable("PostSectionSingle");
                });

            modelBuilder.Entity("SectionManagement.Core.Models.SectionSinglePort", b =>
                {
                    b.Property<int?>("SectionSingleId")
                        .HasColumnType("int");

                    b.Property<int?>("PortId")
                        .HasColumnType("int");

                    b.HasKey("SectionSingleId", "PortId");

                    b.HasIndex("PortId");

                    b.ToTable("PostSectionSinglePort");
                });

            modelBuilder.Entity("SectionManagement.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PostUser");
                });

            modelBuilder.Entity("SectionManagement.Core.Models.Device", b =>
                {
                    b.HasOne("SectionManagement.Core.Models.SectionSingle", "SectionSingle")
                        .WithMany("Devices")
                        .HasForeignKey("SectionSingleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionSingle");
                });

            modelBuilder.Entity("SectionManagement.Core.Models.SectionSingle", b =>
                {
                    b.HasOne("SectionManagement.Core.Models.Section", "Section")
                        .WithMany("SectionSingles")
                        .HasForeignKey("SectionId");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SectionManagement.Core.Models.SectionSinglePort", b =>
                {
                    b.HasOne("SectionManagement.Core.Models.Port", "Port")
                        .WithMany("SectionSinglePorts")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SectionManagement.Core.Models.SectionSingle", "SectionSingle")
                        .WithMany("SectionSinglePorts")
                        .HasForeignKey("SectionSingleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");

                    b.Navigation("SectionSingle");
                });

            modelBuilder.Entity("SectionManagement.Core.Models.Port", b =>
                {
                    b.Navigation("SectionSinglePorts");
                });

            modelBuilder.Entity("SectionManagement.Core.Models.Section", b =>
                {
                    b.Navigation("SectionSingles");
                });

            modelBuilder.Entity("SectionManagement.Core.Models.SectionSingle", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("SectionSinglePorts");
                });
#pragma warning restore 612, 618
        }
    }
}
